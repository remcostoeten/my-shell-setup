#!/bin/bash

# Helper Functions
command_exists() {
  command -v "$1" &> /dev/null
}

is_nextjs() {
  [ -f "next.config.js" ] || [ -f "next.config.mjs" ] || [ -d ".next" ]
}

is_vite() {
  [ -f "vite.config.js" ] || [ -f "vite.config.ts" ] || [ -d "dist" ]
}

remove_with_feedback() {
  local target="$1"
  if [ -e "$target" ]; then
    echo "🧹 Removing ${target}..."
    rm -rf "$target"
    if [ $? -eq 0 ]; then
      echo "✅ Removed ${target}."
      return 0
    else
      echo "❌ Failed to remove ${target}."
      return 1
    fi
  else
    echo "ℹ️  ${target} not found, skipping."
    return 0
  fi
}

get_open_cmd() {
  case "$(uname -s)" in
    Linux*)  echo "xdg-open" ;;
    Darwin*) echo "open" ;;
    CYGWIN*|MINGW*|MSYS*) echo "start" ;;
    *)       echo "" ;;
  esac
}

# Core Functions
rmall() {
  echo "🚀 Running rmall..."
  local success=true

  remove_with_feedback "node_modules" || success=false

  if is_nextjs; then
    echo "⚛️  Detected Next.js project."
    remove_with_feedback ".next" || success=false
  elif is_vite; then
    echo "⚡ Detected Vite project."
    remove_with_feedback "dist" || success=false
  else
    echo "ℹ️  Only removing node_modules."
  fi

  if $success; then
    echo "✅ rmall completed successfully!"
    return 0
  else
    echo "❌ rmall completed with errors."
    return 1
  fi
}

re() {
  echo "🔄 Running re (rmall + pnpm install)..."

  if ! rmall; then
    echo "❌ Aborting re due to errors in rmall."
    return 1
  fi

  if ! command_exists pnpm; then
    echo "❌ Error: 'pnpm' command not found."
    return 1
  fi
  if [ ! -f "package.json" ]; then
    echo "❌ Error: 'package.json' not found."
    return 1
  fi

  echo "📦 Installing dependencies with pnpm..."
  pnpm install
  if [ $? -eq 0 ]; then
    echo "✅ Dependencies installed successfully!"
    return 0
  else
    echo "❌ Failed to install dependencies."
    return 1
  fi
}

run_server_and_open() {
  local script_name="$1"
  local package_manager="$2"
  
  if ! command_exists jq; then
    echo "❌ Error: 'jq' command not found."
    return 1
  fi
  if [ ! -f "package.json" ]; then
    echo "❌ Error: 'package.json' not found."
    return 1
  fi
  if ! command_exists "$package_manager"; then
    echo "❌ Error: '$package_manager' command not found."
    return 1
  fi

  if [ "$script_name" = "auto" ]; then
    if jq -e '.scripts.dev | strings | length > 0' package.json > /dev/null; then
      script_name="dev"
      echo "✅ Using 'dev' script."
    elif jq -e '.scripts.start | strings | length > 0' package.json > /dev/null; then
      script_name="start"
      echo "✅ Using 'start' script."
    else
      echo "❌ Error: No 'dev' or 'start' script found."
      return 1
    fi
  else
    # Check if specified script exists
    if ! jq -e ".scripts.$script_name | strings | length > 0" package.json > /dev/null; then
      echo "❌ Error: Script '$script_name' not found in package.json."
      return 1
    fi
  fi

  local open_cmd=$(get_open_cmd)
  echo "🚀 Starting server via '$package_manager run $script_name'..."
  
  # Run the command and process the output line by line to find URLs
  local url_found=false
  $package_manager run "$script_name" 2>&1 | while IFS= read -r line; do
    echo "$line"
    if ! $url_found && [ -n "$open_cmd" ]; then
      url=$(echo "$line" | grep -oE '(http://|https://)(localhost|127\.0\.0\.1|0\.0\.0\.0):[0-9]+' | head -n 1)
      if [ -n "$url" ]; then
        echo "✅ Opening: $url"
        "$open_cmd" "$url" &>/dev/null &
        url_found=true
      fi
    fi
  done
  return 0
}

# Command aliases for PNPM
de() {
  run_server_and_open "auto" "pnpm"
}

build() {
  echo "🏗️  Running pnpm build..."
  
  if ! command_exists pnpm; then
    echo "❌ Error: 'pnpm' command not found."
    return 1
  fi
  if [ ! -f "package.json" ]; then
    echo "❌ Error: 'package.json' not found."
    return 1
  fi
  
  if jq -e '.scripts.build | strings | length > 0' package.json > /dev/null; then
    echo "🚀 Running 'pnpm build'..."
    pnpm build
    if [ $? -eq 0 ]; then
      echo "✅ Build completed successfully!"
      return 0
    else
      echo "❌ Build failed."
      return 1
    fi
  else
    echo "❌ Error: No 'build' script found in package.json."
    return 1
  fi
}

b() {
  build
}

i() {
  echo "📦 Running pnpm install..."
  if ! command_exists pnpm; then
    echo "❌ Error: 'pnpm' command not found."
    return 1
  fi
  pnpm install
  if [ $? -eq 0 ]; then
    echo "✅ Dependencies installed successfully!"
    return 0
  else
    echo "❌ Failed to install dependencies."
    return 1
  fi
}

rebuild() {
  echo "🛠️  Running rebuild (re + run dev server)..."
  if ! re; then
    echo "❌ Aborting rebuild due to errors."
    return 1
  fi
  de
}

# Command aliases for BUN
be() {
  run_server_and_open "auto" "bun"
}

bb() {
  echo "🏗️  Running bun build..."
  
  if ! command_exists bun; then
    echo "❌ Error: 'bun' command not found."
    return 1
  fi
  if [ ! -f "package.json" ]; then
    echo "❌ Error: 'package.json' not found."
    return 1
  fi
  
  if jq -e '.scripts.build | strings | length > 0' package.json > /dev/null; then
    echo "🚀 Running 'bun build'..."
    bun run build
    if [ $? -eq 0 ]; then
      echo "✅ Build completed successfully!"
      return 0
    else
      echo "❌ Build failed."
      return 1
    fi
  else
    echo "❌ Error: No 'build' script found in package.json."
    return 1
  fi
}

bi() {
  echo "📦 Running bun install..."
  if ! command_exists bun; then
    echo "❌ Error: 'bun' command not found."
    return 1
  fi
  bun install
  if [ $? -eq 0 ]; then
    echo "✅ Dependencies installed successfully!"
    return 0
  else
    echo "❌ Failed to install dependencies."
    return 1
  fi
}

# Alias Setup
setup_aliases() {
  if [ -n "$BASH_VERSION" ]; then
    shell_rc_file="$HOME/.bashrc"
  elif [ -n "$ZSH_VERSION" ]; then
    shell_rc_file="${ZDOTDIR:-$HOME}/.zshrc"
  else
    echo "❌ Shell not supported. Requires Bash or Zsh."
    return 1
  fi

  # PNPM aliases
  alias rmall="rmall"
  alias re="re"
  alias de="de"
  alias build="build"
  alias b="b"
  alias i="i"
  alias rebuild="rebuild"
  
  # BUN aliases
  alias be="be"
  alias bb="bb"
  alias bi="bi"

}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  echo "ℹ️  This script should be sourced, not executed."
  echo "   Use: source $0"
else
  setup_aliases
fi