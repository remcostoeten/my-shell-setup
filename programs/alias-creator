#!/usr/bin/env bash
# ~/.config/dotfiles/programs/alias-creator
#
# Script to manage command aliases with associated help text.
# Compatible with Bash 3.x+.
#
# IMPORTANT: This script needs to be sourced in your shell environment
# for the aliases and functions to be available in your current session.
# Add the following line to your ~/.bashrc, ~/.bash_profile, or ~/.zshrc (if using zsh):
#   source /Users/remcostoeten/.config/dotfiles/programs/alias-creator
# Or run manually in your current shell:
#   . /Users/remcostoeten/.config/dotfiles/programs/alias-creator
#

# --- Configuration: Define Color Variables ---
# Using tput for potentially better terminal compatibility, fallback to ANSI
if command -v tput > /dev/null && tput setaf 1 > /dev/null; then
    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
    YELLOW=$(tput setaf 3)
    BLUE=$(tput setaf 4)
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
else
    # Fallback to raw ANSI codes if tput is unavailable or doesn't support colors
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[0;33m'
    BLUE='\033[0;34m'
    BOLD='\033[1m'
    RESET='\033[0m' # Reset all attributes
fi

# --- Data Structure: Use Indexed Arrays for Compatibility (Bash 3+) ---
# We store names and help texts in parallel arrays.
_ALIAS_NAMES=()
_ALIAS_HELP_TEXTS=()
_ALIAS_COMMANDS=() # Also store the command itself for potential future use

# --- Core Functions ---

# Function to create an alias and store its help text
create_command_alias() {
  local alias_name="$1"
  local command_to_run="$2"
  local help_text="${3:-"No help text provided."}" # Default help text

  # Validate input
  if [[ -z "$alias_name" ]] || [[ -z "$command_to_run" ]]; then
    printf "${RED}Usage: create_command_alias <alias_name> <command> [help_text]${RESET}\n" >&2
    # Use return as this function is called from the sourced script context
    return 1
  fi

  # Check if alias name already exists to avoid duplicates in our arrays
  local i
  for i in "${!_ALIAS_NAMES[@]}"; do
      if [[ "${_ALIAS_NAMES[$i]}" == "$alias_name" ]]; then
          printf "${YELLOW}Warning: Alias '%s' already defined. Overwriting help text.${RESET}\n" "$alias_name" >&2
          _ALIAS_HELP_TEXTS[$i]="$help_text"
          _ALIAS_COMMANDS[$i]="$command_to_run"
          alias "$alias_name"="$command_to_run" # Redefine alias too
          return 0
      fi
  done

  # Create the alias
  alias "$alias_name"="$command_to_run"

  # Store details in parallel arrays
  _ALIAS_NAMES+=("$alias_name")
  _ALIAS_HELP_TEXTS+=("$help_text")
  _ALIAS_COMMANDS+=("$command_to_run")
}

# Function to find the index of an alias name
_find_alias_index() {
    local search_name="$1"
    local i
    for i in "${!_ALIAS_NAMES[@]}"; do
        if [[ "${_ALIAS_NAMES[$i]}" == "$search_name" ]]; then
            echo "$i"
            return 0
        fi
    done
    return 1 # Not found
}

# Function to display help for all registered aliases
show_all_aliases_help() {
  if [[ ${#_ALIAS_NAMES[@]} -eq 0 ]]; then
      printf "${YELLOW}No aliases with help text have been defined yet.${RESET}\n"
      return 0
  fi

  printf "${GREEN}${BOLD}Available Command Aliases:${RESET}\n"
  # Create tuples of "name:help" and sort them based on name
  local sorted_output=()
  local i
  for i in "${!_ALIAS_NAMES[@]}"; do
      # Format for sorting, using a separator unlikely to be in alias name/help
      sorted_output+=("${_ALIAS_NAMES[$i]}:::${_ALIAS_HELP_TEXTS[$i]}")
  done

  # Sort the combined strings and print
  local item
  # Use process substitution for sorting if available, otherwise print unsorted
  if IFS=$'\n' read -rd '' -a sorted_array < <(printf "%s\n" "${sorted_output[@]}" | sort); then
      for item in "${sorted_array[@]}"; do
          local name="${item%:::*}"
          local help="${item#*:::}"
          printf "  ${YELLOW}%-15s${RESET}: %s\n" "$name" "$help"
      done
  else
      # Fallback if process substitution fails (less likely in Bash 3+)
       printf "${RED}Warning: Could not sort output. Printing unsorted.${RESET}\n" >&2
       for item in "${sorted_output[@]}"; do
          local name="${item%:::*}"
          local help="${item#*:::}"
          printf "  ${YELLOW}%-15s${RESET}: %s\n" "$name" "$help"
      done
  fi

}

# Function to display help for a specific alias
show_alias_help() {
  local alias_name="$1"

  if [[ -z "$alias_name" ]]; then
    printf "${RED}Usage: show_alias_help <alias_name>${RESET}\n" >&2
    return 1
  fi

  local index
  index=$(_find_alias_index "$alias_name")

  if [[ $? -ne 0 ]]; then
    printf "${RED}No help available for alias: ${YELLOW}%s${RESET}\n" "$alias_name" >&2
    return 1
  fi

  printf "${GREEN}Help for ${YELLOW}%s${GREEN}:${RESET} %s\n" "$alias_name" "${_ALIAS_HELP_TEXTS[$index]}"
  # Optional: Also show the command itself
  # printf "${GREEN}Command:${RESET} %s\n" "${_ALIAS_COMMANDS[$index]}"
}

# Function to display an interactive menu (optional)
show_interactive_alias_menu() {
  # PS3 is the prompt string for the select command
  PS3="${BLUE}Select an option: ${RESET}"

  printf "\n${BLUE}${BOLD}Interactive Alias Helper Menu:${RESET}\n"
  local options=("List All Aliases" "Help for Specific Alias" "Exit")
  select opt in "${options[@]}"; do
    # Check $REPLY directly as $opt might be empty on invalid input
    if [[ -z "$REPLY" ]]; then
        printf "${RED}Invalid input. Please enter a number or Ctrl+C to exit.${RESET}\n"
        continue # Ask again
    fi
    case $opt in
      "List All Aliases")
        show_all_aliases_help
        printf "\n" # Add space before next prompt
        ;;
      "Help for Specific Alias")
        local alias_name_input
        # Use -r to prevent backslash interpretation, -p for prompt
        read -rp "Enter alias name: " alias_name_input
        # Check if input is empty before calling help function
        if [[ -n "$alias_name_input" ]]; then
            show_alias_help "$alias_name_input"
        else
            printf "${RED}No alias name entered.${RESET}\n"
        fi
        printf "\n" # Add space before next prompt
        ;;
      "Exit")
        printf "${GREEN}Exiting menu.${RESET}\n"
        break # Exit the select loop
        ;;
      *)
        printf "${RED}Invalid option selected: %s${RESET}\n" "$REPLY"
        ;;
    esac
    # Re-display prompt clearly after action
    PS3="${BLUE}Select an option (or press Enter to re-display): ${RESET}"
  done
  # Reset PS3 to default if needed, though it's usually local to the function/script
  # unset PS3
}


# --- Define Aliases and Help Text ---
# Calls create_command_alias which now uses the compatible arrays

# Navigation Aliases
create_command_alias '..' 'cd ..' 'Navigate up one directory'
create_command_alias '...' 'cd ../..' 'Navigate up two directories'
create_command_alias '....' 'cd ../../..' 'Navigate up three directories'
create_command_alias '.....' 'cd ../../../..' 'Navigate up four directories'

# Listing Aliases
create_command_alias 'la' 'ls -la' 'List all files (long format, hidden included)'
create_command_alias 'll' 'ls -l' 'List files (long format)'
create_command_alias 'lsg' 'ls -la | grep' 'List all files and pipe to grep'

# Git Aliases (Examples)
create_command_alias 'ga' 'git add' 'Git add files'
create_command_alias 'gc' 'git commit -m' 'Git commit with message'
create_command_alias 'gs' 'git status -sb' 'Git status (short branch format)'
create_command_alias 'gp' 'git push' 'Git push'

# Help Function Aliases
create_command_alias 'halp' 'show_all_aliases_help' 'Show help for all defined aliases'
create_command_alias 'halias' 'show_alias_help' 'Show help for a specific alias'
create_command_alias 'hmenu' 'show_interactive_alias_menu' 'Show the interactive alias help menu'


# --- Optional: Display Help on Source ---
# Uncomment the following line if you want to see all aliases when you source the file
# show_all_aliases_help

# --- Optional: Run Interactive Menu on Source ---
# Uncomment the following line if you want the menu to appear when you source the file
# show_interactive_alias_menu


# --- Confirmation Message ---
printf "${GREEN}Alias helper functions loaded. Use ${YELLOW}halp${GREEN} for list, ${YELLOW}halias <name>${GREEN} for specific help, or ${YELLOW}hmenu${GREEN} for interactive menu.${RESET}\n"

# --- Cleanup Internal Functions/Variables (Optional) ---
# You might want to unset the internal helper function if you don't want it cluttering
# the environment after sourcing. Arrays will persist.
# unset _find_alias_index